<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Librebits - jordila_@i-ching:~/]]></title>
  <link href="http://jordila.github.io/atom.xml" rel="self"/>
  <link href="http://jordila.github.io/"/>
  <updated>2015-06-23T18:06:26-04:00</updated>
  <id>http://jordila.github.io/</id>
  <author>
    <name><![CDATA[jordila_]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[miNube Con OwnCloud : Bye,bye Dropbox !]]></title>
    <link href="http://jordila.github.io/blog/2015/06/18/minube-con-owncloud-bye/"/>
    <updated>2015-06-18T12:08:27-04:00</updated>
    <id>http://jordila.github.io/blog/2015/06/18/minube-con-owncloud-bye</id>
    <content type="html"><![CDATA[<p>En una anterior nota técnica en este blog hablábamos de <em>La fanfarria del Cloud Computing o la última trending technology</em> &hellip;
Convengamos que ese mismo concepto que criticamos constructivamente ha facilitado una mejor conviencia entre dispositivos computacionales de diferente naturaleza ( PC, Tablet, teléfono <em>smartphone</em> , etc&hellip; )</p>

<p>El objetivo de este artículo es, desde lo paráctico, desmitificar la idea de <em>la nube</em> como algo etéreo e  <em>inasible</em> . Bajándolo a la tierra. Veremos lo sencillo que resulta liberarnos de servicios que pueden atentar contra la <a href="https://owncloud.com/why-on-premise/">seguridad  y privacidad de nuestros datos</a>, como es el caso de <em>Dropbox</em> , el servicio de computación <em>cloud</em>  más popular.</p>

<p>Como reza Wikipedia <a href="https://es.wikipedia.org/wiki/Owncloud">OwnCloud</a> es una aplicación de <em>software libre</em> del tipo Servicio de alojamiento de archivos, que permite el almacenamiento en línea y aplicaciones en línea (cloud computing)</p>

<p>Vayamos con las manos a la masa, y tratemos de instalar <em>nuestra nube</em> en nuestro propio servidor Debian GNU / Linux :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># Descargamos primero la llave asociada al software  ownCloud :
</span><span class='line'>
</span><span class='line'>wget http://download.opensuse.org/repositories/isv:ownCloud:community/Debian_7.0/Release.key</span></code></pre></td></tr></table></div></figure>


<p>(NOTA: Interesante sinergia acá, entre openSuse y Debian, en este caso&hellip; en la familia <em>Linux</em> )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Agregamos la llave a apt para que pueda validar los ficheros :
</span><span class='line'>sudo apt-key add - &lt; Release.key
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># añadimos los  repositorios ownCloud al servicio de builds de openSUSE  a nuestro apt _source lists_ al teclear :
</span><span class='line'>
</span><span class='line'>echo 'deb http://download.opensuse.org/repositories/isv:ownCloud:community/Debian_7.0/ /' | sudo tee -a /etc/apt/sources.list.d/owncloud.list</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Finalmente, actualizamos la base de datos de paquetes e instalamos ownCloud y MySQL:
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install owncloud mysql-server
</span></code></pre></td></tr></table></div></figure>


<h3>Configuración MySQL</h3>

<p>Vamos a configurar nuestro servidor ownCloud para que disfrute de una base de datos MySQL más robusta, en vez de la implementación SQLite por defecto. Para ello debemos configurar MySQL en primera instancia.</p>

<p>Teclear los siguientes comando para inicializar la base de datos y hacer más seguro el sistema:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mysql_install_db
</span><span class='line'>sudo mysql_secure_installation</span></code></pre></td></tr></table></div></figure>


<p>Deberás introducir la clave de administración seleccionada durante la instalación de MySQL. Entonces se te preguntará por los ajustes de seguridad. Presiona <em>Enter</em> y selecciona <em>yes</em> para todos los parámetros excepto el primero (relativo a cambiar de nuevo la contraseña <em>root</em>)</p>

<p>Ahora, identificate en  MySQL como usuario <em>root</em> tecleando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -u root -p</span></code></pre></td></tr></table></div></figure>


<p>De nuevo, serás preguntado por la contraseña de administración MySQL.</p>

<p>Crea una base de datos mediante el comando :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE DATABASE owncloud;</span></code></pre></td></tr></table></div></figure>


<p>Crea y asigna privilegios al nuevo usuario MySQL para manejar la base de datos de operaciones de  ownCloud:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GRANT ALL ON owncloud.* to 'owncloud'@'localhost' IDENTIFIED BY 'select_database_password';</span></code></pre></td></tr></table></div></figure>


<p>Salir de MySQL tecleando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<p>Sólo queda proceder a la instalación guiada, accediendo a la carpeta ( <em>DocumentRoot</em> ) que alberga <em>tu nube</em> ownCloud</p>

<p>Que lo disfrutes libremente y sin chusmeos.</p>

<h3>Recursos :</h3>

<ul>
<li><p>Documentación en <a href="http://owncloud.com">Owncloud</a></p></li>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-owncloud-and-configure-owncloud-apps-on-an-ubuntu-12-04-vps">How To Install OwnCloud and Configure OwnCloud Apps on an Ubuntu 12.04 VPS</a></p></li>
</ul>


<h3>Bonus:</h3>

<p>No nos queda más que instalar certificados SSL (si no lo habíamos hecho ya) que nos faciliten un diálogo seguro con nuestro servidor OwnCloud, mediante <em>https</em> &hellip; pero eso ya será probablemente motivo de otro post / nota técnica en este mismo blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[En Un Principio Fue La Linea De comandos-...GNU/Linux-Bash]]></title>
    <link href="http://jordila.github.io/blog/2015/05/09/en-un-principio-fue-la-linea-de-comandos-dot-dot-dot-gnu-slash-linux-bash/"/>
    <updated>2015-05-09T06:35:47-04:00</updated>
    <id>http://jordila.github.io/blog/2015/05/09/en-un-principio-fue-la-linea-de-comandos-dot-dot-dot-gnu-slash-linux-bash</id>
    <content type="html"><![CDATA[<p>Estos días he aprovechado cierto receso para enriquecer mi relación con mi sistema GNU / Linux . Esto es, hablarle, preguntarle&hellip; más y hacer menos <em>click</em> . Buscando una comunicación más fluida y harmoniosa.</p>

<p>Este proceso de enriquecimiento de la interacción se produce tras la inspiradora lectura de <a href="https://es.wikipedia.org/wiki/En_el_principio_fue_la_l%C3%ADnea_de_comandos">&ldquo;En un principio fue la línea de comandos&rdquo;</a></p>

<p>Nos da la clave de como algunos sistemas operativos (privativos, principalmente) nos han querido hacer creer que la terminal o línea de comando ( CLI ) era un vestigio del pasado. Con atractivos ( o no tanto) interfaces gráficos, bajo ese prisma, se quiere ocultar lo innegable: los sistemas computacionales son complejos. Como dice Eben Moglen,en cierto modo , el abuso del uso del ratón ( <em>mouse</em> ) deriva en una espasmódica relación del usuario con el sistema. <em>A golpe de ratón</em> .
La interacción está, en ese caso, mediada por una capa de abstracción que no es posible más que mediante la asunción ( imposición? ) de ciertos valores y parámetros por defecto. El diseñador de la interfaz gráfica (GUI) ha tenido que, necesariamente, simplificar y realizar bastantes suposiciones para asumir <em>valores por defecto</em> .</p>

<p>Al dejar de controlar esos detalles en pro de la simplicidad, de &ldquo;hacernos la vida más fácil&rdquo; como usuarios, estamos renunciando no sólo a todo el potencial de nuestro (?) sistema, sino también a la posibilidad de una interacción libre de intermediarios.</p>

<p>Cuando era adolescente y cayó en mis manos el primer teclado <em>Unix</em> no en entendía nada, sentí temor&hellip; quería salir corriendo a por mi ratón! j,aj! Éste ha sido un hermoso proceso,&hellip; de reencuentro y reconciliación. a hablarle a mi computadora GNU / Linux&hellip; Pasé de hablarle con gruñidos a base de click, a susurrarle en la línea de comandos (Bash). Sintiendo el latido y el repiqueteo de las teclas&hellip;</p>

<p>Se encuentra fácilmente en la red de redes,  LinuxCommand-TLCL.pdf, muy inspirador, ya en lo práctico, en este sentido. Estoy leyendo y practicando con él. Bienvenidos al apasionante mundo del GNU / Linux <em>Bash</em> <em>Shell</em> .</p>

<p>BONUS : por ejemplo, acabo de aprender como navegar más fácilmente entre directorios desde la línea de comandos,</p>

<p>Teclear toda la ruta del directorio con <em>cd</em> consume tiempo. Puedes simplemente usar <em>pushd</em> o <em>popd</em> para commutar hacia y desde dos directorios.
Cuando estás en en un cierto directorio y deseas commutar a otro directorio, en vez de <em>cd</em> usa <em>pushd</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pushd /path/to/new/directory</span></code></pre></td></tr></table></div></figure>


<p>Usando este comando, la ruta del directorio original será recordada para usar de vuelta mediante <em>popd</em> .Al acabar de trabajar en el nuevo directorio, para volver al directorio original, simplemente teclea :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ popd</span></code></pre></td></tr></table></div></figure>


<p>Fuente: <a href="http://www.linuxandlife.com/2013/04/some-tips-to-use-command-line-faster.html">http://www.linuxandlife.com/2013/04/some-tips-to-use-command-line-faster.html</a></p>

<p>Bonus :</p>

<p>Mejor no hacer como yo &hellip; no esperar a la edad adulta computacional para aprender a manejarse en la línea de comandos, ja,ja! Aquí tienen un par de pdfs de intro y con los motivos por los que es buena cosa aprender a manejarse en las “pantallas negras” de buen principio</p>

<p><a href="https://elbinario.net/wp-content/uploads/2015/01/001-Intro.pdf">001-Intro.pdf</a></p>

<p><a href="https://elbinario.net/wp-content/uploads/2015/01/002-Motivos.pdf">002-Motivos.pdf</a></p>

<p>Cortesía de <a href="http://elbinario.net">Elbinario.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Vueltas Con LinuX Containers (LXC) II]]></title>
    <link href="http://jordila.github.io/blog/2014/12/04/a-vueltas-con-linux-containers-lxc-ii/"/>
    <updated>2014-12-04T11:50:00-05:00</updated>
    <id>http://jordila.github.io/blog/2014/12/04/a-vueltas-con-linux-containers-lxc-ii</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Los servidores lo tuvieron todo. Los clientes, nada. Bienvenido al Cloud Computing"
</span><span class='line'>(Eben Moglen , Free Software Foundation)</span></code></pre></td></tr></table></div></figure>


<p><em>Lo prometido es deuda</em> &hellip; reza el dicho popular.</p>

<p>En un <a href="https://jordila.github.io/blog/2014/11/02/a-vueltas-con-linux-containers-lxc-i/">post anterior</a> nos zambullimos en la tecnología de virtualización ( subyacente a la <em>trendy</em>  y  cacareada   <em>Cloud</em> )
En otras palabras, la Internet de siempre con una capa de abstracción de hardware : <em>LinuX Containers LXC</em> .</p>

<h2>La fanfarria del <em>Cloud Computing</em>  o la última <em>trending technology</em></h2>

<p>Con ese mero argumento, una vez más las grandes corporaciones (que conozco por experiencia) del sector infocomunicacional  <em>venden</em> servicios que realmente los clientes no necesitan. Les encadenan a sus servidores, que se acumulan en campos de concentración de hardware, ventilados, aislados y con las máximas medidas de seguridad. Es la economía de escala &hellip; la misma que está agotando al Planeta que habitamos.</p>

<p>En Canadá algunas empresas se jactan de mantener esas granjas de servidores virtualizados de forma sostenible y limpia (!). Sin derroche de energía (que consumen cientos o miles de procesadores corriendo en paralelo). Aprovechan, dicen, las corrientes de aire frío (ártico). En fin.</p>

<h2>(pseudo)Virtualizando Debian en un  Debian GNU/Linux (host)</h2>

<p>Disquisiciones aparte. Tratemos de crear un contenedor <em>Debian</em> albergado en nuestro <em>Debian GNU/Linux</em> (host del contenedor), o computadora-laptop de trabajo.</p>

<p>Por no repetir lo que viene detallado en los tutoriales referenciados, solo diré que he encontrado problemas con <em>LXC</em> en mi Debian <em>GNU/Linux</em> Jessie , siguiendo los pasos de la <a href="https://wiki.debian.org/LXC#Installation">Wiki de Debian</a>.</p>

<p>Problemas que también encontró el autor de <a href="http://feeding.cloud.geek.nz/posts/lxc-setup-on-debian-jessie/">LXC setup on Debian Jessie</a>, gracias al cual pude por fin cumplir mi promesa de hacer correr mis máquinas (pseudo)virtuales no sólo en <em>Ubuntu</em> , sino también en mi <em>Debian GNU/Linux</em>(a continuación me fijaré en la parte que más útil me fue). A él mi agradecimiento.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Crear un  contenedor Debian (en /var/lib/lxc/) es simple:
</span><span class='line'>
</span><span class='line'># sudo MIRROR=http://http.debian.net/debian lxc-create -n sid64 -t debian -- -r sid -a amd64
</span><span class='line'>
</span><span class='line'>// Inicia o para el contenedor de la siguiente forma :
</span><span class='line'>
</span><span class='line'># sudo lxc-start -n sid64 -d
</span><span class='line'>
</span><span class='line'># sudo lxc-stop -n sid64
</span><span class='line'>
</span><span class='line'>// Puedes encontrar la dirección IP asignada al contenedor, recibida por el Servidor  DHCP tecleando, y su estado 
</span><span class='line'>
</span><span class='line'># sudo lxc-ls --fancy
</span><span class='line'>
</span><span class='line'>..
</span></code></pre></td></tr></table></div></figure>


<p>A partir de aquí podemos seguir manejando nuestros LinuX Containers, <a href="https://jordila.github.io/blog/2014/11/02/a-vueltas-con-linux-containers-lxc-i/">como veníamos haciendo en el anterior post relacionado</a></p>

<h2><em>Docker</em> ?  &ldquo;It&rsquo;s LinuX Containers , stupid !&rdquo;</h2>

<p>En lo práctico,    pongamos que para desarrollar una aplicación web determinada necesitamos un <em>stack</em> de software    (p.ej.: el clásico Linux+Apache+MySQL &ndash;  LAMP) en unas versiones determinadas, por requisitos del entorno (p.ej.: <em>PHP 5.3 y  MySQL 5.1</em> ).    Y sólo puede ser de este modo. En vez de tener que rehacer  todo el stack de nuestro servidor de pruebas nos bastará con generar un <em>LinuX Container</em> que cumpla esos requisitos. El único condicionante es la base del stack. Está sujeta al <em>kernel</em> del sistema host (en mi caso, el de Debian 8 <em>GNU/Linux</em> )  Además, podré desarrollar  cómodamente de forma <em>ágile</em> (ligera e iterativa), pues puedo usar para ello el comando <em>lxc-clone</em> para armar tantas maquetas o prototipos como requiera. Por ejemplo,</p>

<ul>
<li><p>container LXCO = Debian GNU/Linux server</p></li>
<li><p>container LXC1 =  Debian GNU/Linux server + AMP</p></li>
</ul>


<p>(que podré clonar para otras aplicaciones que necesiten el mismo <em>stack</em> , p,ej. el <em>LMS Moodle</em> , <em>Drupal CMS</em> &hellip;)</p>

<ul>
<li><p>container LXC2= LAMP + CMS Drupal</p></li>
<li><p>etc &hellip; (así sucesivamente)</p></li>
</ul>


<p><em>BONUS</em> : De paso he podido hacer una primera prueba satisfactoria con <em>Docker</em> , que me permitiría importar y exportar fácilmente aplicaciones a partir de un <em>LinuX Container</em> y bla,bla&hellip;  pero de eso quizás hablemos en otro nota de este blog más adelante&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openshift PaaS, Drupal CMS Y Git]]></title>
    <link href="http://jordila.github.io/blog/2014/11/24/openshift-paas/"/>
    <updated>2014-11-24T10:19:37-05:00</updated>
    <id>http://jordila.github.io/blog/2014/11/24/openshift-paas</id>
    <content type="html"><![CDATA[<p>Vamos a bucear un poco más en la PaaS de Red Hat Cloud (RHC).Openshift, El &lsquo;Cloud&rsquo; libre para todos y todas (?).</p>

<p>Para ello hemos de cicunscribirnos a los parámetros del entorno que nos ofrece actualmente, a efectos de versionado, etc&hellip;
Para lo  que nos ocupa, una típica instalación LAMP (Linux+Apache+MySQL+Php) como es <em>Drupal CMS</em>, esto es :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Php v.5.4
</span><span class='line'>MySQL v.5.5 ...</span></code></pre></td></tr></table></div></figure>


<p>que es lo que <em>RHC</em> nos ofrece al momento de escribir estas palabras. Recordar que podemos disfrutar de tres instancias <em>libre y gratuitas</em> en  nuestra cuenta <em>Openshift</em> . Sí, para siempre.</p>

<p>Vamos seguido el paso a paso de creación de la cuenta (remota) en el servidor RHC y la instalación de la herramienta (CLI) cliente <em>rhc</em> en local (bien detallado en el tutoria oficial).</p>

<p>Sigamos ahora los pasos del <a href="https://github.com/openshift/drupal-quickstart">Drupal Quickstart para RHC oficial</a> &hellip; A ver si somos capaces de encajar las piezas del puzzle.</p>

<p>[..]</p>

<p>Sea como fuere, cómodamente desde el panel de control de <em>Openshift(RHCloud)</em> , o mediante nuestro nuevo flamante <em>CLI</em> <em>rhc</em> en <em>Bash</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  Drupal-quickstart  - CLI rhc
</span><span class='line'># rhc app create drupal php-5.4 mysql-5.5 cron</span></code></pre></td></tr></table></div></figure>


<p>Nos permite disponer de un completo entorno de desarrollo ( soporta <em>Git</em> por defecto) de forma rápida y sencilla. En mi caso por ejemplo, armé rápidamente una instancia de <em>Drupal8</em> para ir &lsquo;jugando&rsquo; &hellip; en cuestión de minutos.</p>

<p>KISS &ndash; Keep it Simple Stupid</p>

<p>Bonus : Cómodamente también puedes &lsquo;mapear&rsquo; de forma remota la carpeta con el código de tu desarrollo&hellip; gracias a sFTP, directamente en tu Navegador de archivos preferido ( Nautilus, Thunar&hellip;)</p>

<p>RECURSOS:</p>

<p><a href="https://austin2014.drupal.org/session/openshift-and-drupal-story-true-open-source-collaboration-and-innovation">&ldquo;Openshift and Drupal story true open-source collaboration and innovation&rdquo;</a></p>

<p><a href="https://www.openshift.com/quickstarts/drupal-7">&ldquo;Drupal 7 | Openshift &rdquo;</a></p>

<p><a href="https://github.com/openshift/drupal-quickstart">&ldquo;Drupal-quickstart | Github &rdquo;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiplica Las Posibilidades De Drupal CMS : Proyectos Sandbox (Ej.: 'Bootstrap Everywhere']]></title>
    <link href="http://jordila.github.io/blog/2014/11/11/multiplica-las-posibilidades-de-drupal-cms-proyectos-sandbox-ej-dot-bootstrap-everywhere/"/>
    <updated>2014-11-11T08:30:29-05:00</updated>
    <id>http://jordila.github.io/blog/2014/11/11/multiplica-las-posibilidades-de-drupal-cms-proyectos-sandbox-ej-dot-bootstrap-everywhere</id>
    <content type="html"><![CDATA[<h3>Intro</h3>

<p>Lo maravilloso de la mundial y activa comunidad Drupal son cosas como las que siguen&hellip;</p>

<p>Estamos iniciando un proyecto <em>Drupal7</em> en el que <em>Bootstrap</em> theme  puede servirnos
Hay otros temas más <em>propios</em> de <em>Drupal</em> como <em>Omega</em> , <em>Zen</em> , etc&hellip; que bien podrían servirnos.</p>

<p>Lo interesante de Bootstrap en este caso es, entre otras cosas, que lo hemos manejado en el equipo en otros contextos, y facilita un <em>lenguaje</em> <em>común</em> para las tareas de <em>Theming</em> .</p>

<p> En las que, desde el principio, queremos que nuestro Tema elegido mantenga compatibilidad con módulos <em>Panels</em> y <em>Panel</em> <em>Everywhere</em> .</p>

<p>Pero&hellip; ay! Parece que Bootstrap no la ofrece.</p>

<p>Acudimos entonces a la contribución de <em>mpv</em> , que elaboró una <em>Sandbox</em> para solventar precisamente esta cuestión : <a href="https://www.drupal.org/sandbox/mpv/1719916">Bootstrap Everywhere</a></p>

<p>(un proyecto <em>Sandbox</em> no es más que código Drupal alternativo, que no ha sido empaquetado en un <em>módulo</em> como tal )</p>

<p>Veamos si somos capaces de encajar la piezas del <em>puzzle</em> &hellip;</p>

<h3>Dev</h3>

<p>Drupal 7 Bootstrap Everyhwere sandbox](<a href="https://www.drupal.org/project/1719916">https://www.drupal.org/project/1719916</a>)</p>

<p>by mpv</p>

<p>0.&ndash; En nuestro caso, los pre-requisitos son disponer de <a href="https://www.drupal.org/project/Bootstrap">Bootstrap 2 theme,(ojo, no la v3!)</a> instalado previemente, que es con el cual el proyecto <em>Sandbox</em> _Bootstrap es compatible.</p>

<p>1.&ndash; Así pues  Bootstrap theme   ( las versiones se alinean con las del popular <em>framework</em> , ej.: 7.x-2.2 &lt;&mdash;> Bootstrap 2.3.2 )
  (activamos &mdash;> default theme , o creamos un sub-theme)</p>

<p>2.&ndash;  habilitamos los módulos <em>Panels</em> y <em>Panels</em> <em>Everywhere</em>  cómodamente via &lsquo;drush dl <module>&rsquo; y &lsquo;drush en <module>&rsquo;</p>

<p>// así tenemos un sitio &lsquo;operativo&rsquo; con contenido aleatorio para test, previamente instalado el módulo <em>devel</em>
3.&ndash; drush devel generate 20</p>

<p>3.&ndash; seguimos las indicaciones de mpv para instalar, como un tema más,<a href="https://www.drupal.org/sandbox/mpv/1719916">Bootstrap Everywhere</a>
básicamente el comando &lsquo;git clone &lt;&hellip;>&rsquo;</p>

<h3>Epílogo</h3>

<p>El extenso y rico ecosistema de software y módulos de <em>Drupal</em> <em>CMS</em> se ve multiplicado por los proyectos <em>Sandbox</em> . De esta forma, el Content Management Systema se construye por capas :</p>

<p>1.&ndash; core  &ndash; núcleo  ( <em>Do no hack the core!</em> )
2.&ndash; contrib modules ( los más populares, como <em>Views</em> acaban integrándose en el core )
3.&ndash; proyectos Sandbox , &lsquo;no modularizados&rsquo;&hellip; que acaban multiplicando las posibilidades</p>

<p>Gracias <em>mpv</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendizajes De Una Actualización Remota De Sistema Fallida: 'Screen']]></title>
    <link href="http://jordila.github.io/blog/2014/11/10/aprendizajes-de-una-actualizacion-remota-de-sistema-fallida-screen/"/>
    <updated>2014-11-10T07:58:05-05:00</updated>
    <id>http://jordila.github.io/blog/2014/11/10/aprendizajes-de-una-actualizacion-remota-de-sistema-fallida-screen</id>
    <content type="html"><![CDATA[<p>Estamos conectados al servidor remoto en producción por sesión <em>SSH</em> .</p>

<p>Decidimos que es hora de actualizar los paquetes de nuestro sistema servidor ( Debian GNU / Linux ) en el que alojamos los flamantes últimos desarrollos web de nuestros clientes para disfrute del gran público internauta.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//secuencia actualización de repositorios fuente y paquetes
</span><span class='line'># apt-get update && upgrade</span></code></pre></td></tr></table></div></figure>


<p>El sensible proceso en lote se inicia normalmente&hellip;</p>

<p>CRASH! Ocurre&hellip; <em>Broken</em> <em>pipe</em> , por el motivo que fuera perdimos la conexión remota en el peor momento.</p>

<p>Tardamos un tiempo en recuperar la conexión <em>SSH</em> , lo que hace que se vea afectado el proceso en el momento de la interacción: que nos solicitaba si queríamos mantener no determinados archivos de configuración del sistema servidor Web  <em>LAMP</em> , justo en el momento del CRASH! .</p>

<p>En la reconexión algo ,se ve enseguida, no anduvo . Chequeamos la disponibilidad de los servicios web alojados: <em>NOT FOUND</em> . Desastre confirmado.
En un primer diagnóstico quedaron afectados (desconfigurados) los paquetes <em>MySQLServer</em> &hellip; bla,bla.</p>

<p>Inspiramos.Expiramos.</p>

<p>Acudimos a la comunidad, como no&hellip; via IRC. En <em>#Debian</em> lo primero que nos sugieren es que deberíamos usar <em>siempre</em> la utilidad <a href="http://rz0r.blogspot.com.ar/2007/12/screen-otra-util-herramienta-en-linux.html">screen</a> para este tipo de operaciones <em>( apt-get upgrade )</em> críticas.</p>

<p>Lección aprendida.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Vueltas Con LinuX Containers ( LXC ) I]]></title>
    <link href="http://jordila.github.io/blog/2014/11/02/a-vueltas-con-linux-containers-lxc-i/"/>
    <updated>2014-11-02T16:00:04-05:00</updated>
    <id>http://jordila.github.io/blog/2014/11/02/a-vueltas-con-linux-containers-lxc-i</id>
    <content type="html"><![CDATA[<p>Tras unos días de vacaciones hemos vuelto a los teclados cono energías y fuerzas renovadas.</p>

<p>Esta vez vamos a emprender el viaje a la virtualización de entornos. Hasta ahora nuestra experiencia se reducía a algunos contactos con <em>VirtualBox</em>. Así lograbas una  completa máquina virtual en la que correr otros sistemas operativos y/o entornos, que podrían ser diferentes al tuyo (Host).</p>

<p>La experiencia fue agridulce, pues si bien es un adelanto poder disponer de &lsquo;entornos virtuales&rsquo; en tu computadora, se hacía bastante pesado, el proceso de creación de la máquina virtual (consumiendo muchos recursos), por no hablar del proceso de exportar luego el trabajo realizado en ello.</p>

<p>Últimamente se habla mucho en la red de redes de <a href="http://www.docker.com">Docker</a>, que como reza la entrada correspondiente en Wikipedia <em>es un proyecto de código abierto que automatiza el despliegue de aplicaciones dentro de contenedores software, proveyendo de una capa adicional de abstracción y automatización de virtualización del sistema operativo en Linux</em></p>

<p>Mmh&hellip; what? Pues que ahora podemos fácilmente empaquetar en contenedores nuestros entornos de desarrollo (virtualizados) e intercambiarlos sencillamente como cromos entre servidor-PC- portátil etc, crearlos, clonarlos, destruirlos con una línea de comando&hellip; ? Veamos&hellip;</p>

<p>El caso es que <em>Docker</em> basa su potencia en <a href="http://es.wikipedia.org/wiki/LXC">LXC</a> :<em>LinuX</em> <em>Containers</em>. Así que &hellip; principiemos por el principio.</p>

<p>Mi agradable sorpresa ha sido el comprobar como sencillamente puedo crear una máquina (pseudo) virtual , con unos pocos comandos, en mi computadora. Esa (pseudo) máquina hábilmente, gracias a <em>LXC</em> reutiliza el mismo <em>Kernel</em> de la máquina que la alberga (Host). Ecología de recursos. De ahí lo de <em>pseudo</em> .</p>

<p>El caso es que uno de los pocos contras del proceso con <em>LXC</em>  es que el nuevo sistema (pseudo) virtualizado (obviamente) debe basarse en el mismo Kernel de la máquina Host.</p>

<p>El primero que me habó de <em>LXC</em> fue mi amigo <em>hk</em> &hellip; compartiendo conmigo el concepto de como uno puede usar esta técnica para correr diferentes servicios interconectados entre sí via IP (paralelamente en el mismo Host).</p>

<p>Seguiré los pasos de <a href="https://www.stgraber.org/2013/12/20/lxc-1-0-your-first-ubuntu-container/">Stéphane Graber</a> para, este vez desde Ubuntu 14.04 (el <em>hijo</em> díscolo ) en vez de Debian Jessie (su <em>padre</em>), por comodidad.</p>

<p>En un alarde de originalidad, copio y pego los comandos, y los adapto a mi gusto, traduciendo los comentarios que clarifican los pasos a dar .</p>

<p>Inspiramos.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Crear "p1" : container usando el template "ubuntu" y la version de Ubuntu
</span><span class='line'># and architecture as the Host (mi compu _real- ). Con "-- --help" listamos todas las opciones all available options.
</span><span class='line'>
</span><span class='line'>$ sudo lxc-create -t ubuntu -n p1
</span><span class='line'>
</span><span class='line'># Iniciar el container (en background)
</span><span class='line'>$ sudo lxc-start -n p1 -d
</span><span class='line'>
</span><span class='line'># Entrar al container en una de los siguientes formas
</span><span class='line'>
</span><span class='line'>##  'Attach' a la consola del container' (ctrl-a + q para detach)
</span><span class='line'>$ sudo lxc-console -n p1
</span><span class='line'>
</span><span class='line'>## Bash directamente en el container (cortocircuitando el login de consola), requiere &gt;= 3.8 kernel
</span><span class='line'>$ sudo lxc-attach -n p1
</span><span class='line'>
</span><span class='line'>## via SSH
</span><span class='line'>$ sudo lxc-info -n p1
</span><span class='line'>$ ssh ubuntu@&lt;ip según lxc-info&gt;
</span><span class='line'>
</span><span class='line'># Stop container, de una de las siguientes formas
</span><span class='line'>## Stop desde él mismo
</span><span class='line'>$ sudo poweroff
</span><span class='line'>
</span><span class='line'>## Stop limpiamente desde 'fuera'
</span><span class='line'>$ sudo lxc-stop -n p1
</span><span class='line'>
</span><span class='line'>## Kill desde 'fuera'
</span><span class='line'>$ sudo lxc-stop -n p1 -k</span></code></pre></td></tr></table></div></figure>


<p>Bien..
Expiramos.
Ya armamos nuestro primer, simple y ligero contenedor Linux &ndash; <em>LXC</em> .</p>

<p>Como dice Stéphane,  &ldquo;habrás notado que habiualmente todo funciona tal cual en Ubuntu (en Debian GNU/Linux hay que usar algunos comandos más&hellip; parece, para los <em>cgroups</em> y la parte de red&hellip; )&rdquo;
&ldquo;los kernels Ubuntu soportan todas las facilidades que requiere <em>LXC</em> , y los paquetes configuran un <em>bridge</em> y servidor <em>DHCP</em> que los containers usan por defecto&rdquo; &hellip; Todo ello, obvio, configurable y bla,bla&hellip;</p>

<p>Parece que trabaja en Canonical&hellip; ;&ndash;)
(más adelante trataremos de repetir el proceso en Debian GNU / Linux (!), pero eso será en otro <em>post</em> &hellip; )</p>

<p>Vayamos por segundo <em>container</em> que albergue querido Debian. Básicamente lo que haremos será usar otro <em>template</em> de container.
Es decir :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## creamos el container debian, forzando la arquitectura 
</span><span class='line'>$ sudo lxc-create -t debian -n p2 -- -a i386
</span><span class='line'>
</span><span class='line'>## iniciamos el container debian 32bits
</span><span class='line'>$ sudo lxc-start -n p2 -d
</span><span class='line'>
</span><span class='line'>## lo chequeamos,
</span><span class='line'>
</span><span class='line'>$ sudo lxc-info -n p2
</span><span class='line'>Name:           p2
</span><span class='line'>State:          RUNNING
</span><span class='line'>PID:            5828
</span><span class='line'>IP:             10.0.3.118
</span><span class='line'>CPU use:        1.88 seconds
</span><span class='line'>BlkIO use:      49.66 MiB
</span><span class='line'>Memory use:     85.56 MiB
</span><span class='line'>KMem use:       0 bytes
</span><span class='line'>Link:           vethV01VLC
</span><span class='line'> TX bytes:      1.79 KiB
</span><span class='line'> RX bytes:      5.69 KiB
</span><span class='line'> Total bytes:   7.48 KiB
</span><span class='line'>
</span><span class='line'>## notar que, para acceder a él si es necesario por esta via, obtenemos su dirección IP
</span></code></pre></td></tr></table></div></figure>


<p>NOTA: los diferentes <em>containers</em> , dijimos, tendrán siempre de base el mismo Kernel, que comparte con el Host que los alberga. En nuestro caso</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Verificamos el sistema y Kernel del Host (común a los containers)
</span><span class='line'>$ uname --all
</span><span class='line'>Linux RainbowWarrior 3.13.0-37-generic #64 [...]</span></code></pre></td></tr></table></div></figure>


<p>Bla,bla &hellip; para mi uso y propósito personal, instalaré la pila &ndash; <em>stack</em>  LAMP (Linux+Apache+MySQL+Php). Voilà.
Ya tengo mi servidor Web personal de bolsillo ultraligero&hellip;</p>

<p>NOTA2: en línea lo siguiente más simple probablemente sea la Raspberry Pi con <a href="http://www.raspbian.org/">Raspbian</a>  ;&ndash;)</p>

<p>Es por ello que nos viene como un guante el siguiente comando para procesar un clon.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## pre-condición al clonar : el _container_ a clonar deber estar en stop
</span><span class='line'>$ sudo lxc-stop -n p2
</span><span class='line'>
</span><span class='line'>## clonamos 'p2' , nuestro 2º container Debian mínimo con LAMP
</span><span class='line'>$ sudo lxc-clone -o &lt;container original: 'p2'&gt; -n &lt;nombre del nuevo container&gt;
</span><span class='line'>
</span><span class='line'>## en nuestro caso, parametrizando lo anterior ..., y lo llamamos lamp1
</span><span class='line'>$ sudo lxc-clone -o p2 -n lamp2</span></code></pre></td></tr></table></div></figure>


<p>A estas alturas del partido&hellip; tenemos 3 instancias <em>LXC</em> en juego</p>

<p> 1.&ndash; p1     :  Ubuntu  clon del sistema <em>Host</em> común</p>

<p> 2.&ndash; p2     :  Debian GNU/Linux</p>

<p> 3.&ndash; lamp2  :  Debian GNU/Linux + LAMPhp + phpMyAdmin &hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>##podemos comprobar el estado operativo de cada container LXC
</span><span class='line'>$ lxc-ls --fancy</span></code></pre></td></tr></table></div></figure>


<p>&hellip; al que, por ejemplo, puedo acceder en</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://10.0.3.85/phpmyadmin/</span></code></pre></td></tr></table></div></figure>


<p>Voilà.</p>

<p>:&ndash;)</p>

<p>BONUS : <a href="http://lxc-webpanel.github.io">LXC Web Panel para Ubuntu</a> desde el que poder cómodamente gestionar todos los containers LXC &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¿Un Buscador Para Mi Sitio Web (Estático)?]]></title>
    <link href="http://jordila.github.io/blog/2014/10/03/un-buscador-para-mi-sitio-web-estatico/"/>
    <updated>2014-10-03T09:31:57-04:00</updated>
    <id>http://jordila.github.io/blog/2014/10/03/un-buscador-para-mi-sitio-web-estatico</id>
    <content type="html"><![CDATA[<p>Cuando inicié mi último proyecto me decanté por el reto de desarrollar un sitio Web estático para un fondo audivisual de 20 videos y 400 bellas imágenes de la Patagonia.
Sopesé los pros y contras, frente alternativas CMS como Drupal. De hecho estuve varios meses desarrollando maquetas en ese completo CMS. Completo y complejo.
Con el tiempo y el conocimiento de los últimos avances en <em>HTML5 y CSS3</em>&hellip; decidí apostar por la filosofía no-CMS. &lsquo;Delegando&rsquo; en servicios Web o pre-desarrollo en mi sistema GNU/Linux las capacidades que mi &lsquo;CMS no-CMS&rsquo; iba a echar en falta.</p>

<p>En (casi) todos los aspectos, el desarrollo salió ganando&hellip; El Video y la imagen se manejan con gran sencillez en <em>HTML5</em> . Puedes armar tu &lsquo;YouTuVe&rsquo; y Flickr con facilidad. Una hermosa galería / carousel por acá&hellip; y Voilà!</p>

<p>Obviamente la contrapartida es el procesado, indexado de las imágenes etc&hellip; Nada que un script <em>GNU/Linux</em> y alguna buena librería como <em>FFMPEG</em> no pueda solventar.</p>

<p>Reconozco que no evalué bien el aspecto del buscador de contenidos propio del sitio. Obviamente el sitio web estático no puede beneficiarse de la potencia (a cambio de mayor complejidad) de una base de datos que indexe el contenido a medida que se <em>sube</em> &hellip;</p>

<p>Llegados a ese punto, la primera y poco elaborada alternativa es usar, como decíamos servicios de terceros.</p>

<p><em>Google Custom Search</em> &hellip; desde luego es el mejor buscador. Si bien, como es sabido en la era &ldquo;Post Snowden&rdquo;, poco o nada respetuoso con la privacidad. Ofrecen un servicio en el que (a partir de ) 100 U$S retiran la insidiosa publicidad de los resultados de búsqueda. Pasemos página</p>

<p>El buscador <a href="https://duckduckgo.com/search_box">DuckDuckGo</a> ofrece acá la alternativa en el sentido de la privacidad. Principalmeente, por lo que entiendo, se nutre de resultados de búsqueda de <em>Bing</em> y <em>Yahoo!</em> principalmente &hellip; &lsquo;anonimizando&rsquo; la búsqeda.
Tras algunas pruebas, resulta muy sencillo re-utilizar este simpático buscador. Pero los resultados no son los esperados&hellip;
( en su #IRC me dicen que es cuestión de &lsquo;moverse&rsquo; por las diferentes redes sociales.. para que así los mencionados motores de búsqueda acaben &lsquo;encontrándonos&rsquo;).</p>

<p>Así pues, si no queremos depender tanto de terceros&hellip; tendremos que ser más imaginativos&hellip;</p>

<p>Buscando, buscando&hellip; por los caminos del <em>software-libre</em> encontré  <a href="http://www.tipue.com/search/">TipueSearch</a> &hellip; ¿será lo que necesitamos?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal : Harmonizando Los Módulos Panels]]></title>
    <link href="http://jordila.github.io/blog/2014/09/26/drupal-harmonizando-los-modulos-panels/"/>
    <updated>2014-09-26T06:47:48-04:00</updated>
    <id>http://jordila.github.io/blog/2014/09/26/drupal-harmonizando-los-modulos-panels</id>
    <content type="html"><![CDATA[<p>Iniciamos un nuevo proyecto Web.</p>

<p>En este caso nos decantamos por Drupal, dado que el cliente debe ser capaz de autogestionar la edición de contenidos del sitio con cierta facilidad. Convengamos que en un escenario así, Drupal sobresale por su interfaz. Ello nos facilita la decisión estratégica en este caso, por encima de otras consideraciones, como la <em>ligereza</em> y <em>agilidad</em> de las herramientas de desarrollo escogidas.</p>

<p>Bien, adelante con Drupal CMS. Y en que entorno&hellip; Surje la propuesta de usar Bootstrap, en cuanto al <em>theming</em>  (diseño)&hellip;por aquello  de trabajar en un <em>lugar común</em> en el equipo. Usaremos también los módulos Drupal <em>Panels</em> y <em>PanelEverywhere</em> . No tengo experiencia en ellos&hellip; así que me despierta la curiosidad su funcionamiento. Parece que facilitan enormemente el maquetado web, y de forma muy visual.</p>

<p>Mmh&hellip; y como se cocina todo esto en su conjunto ?</p>

<p>La apasionada comunidad drupal (una vez más) acude a nustro rescate. Los compañeros de <a href="http://gcoop.coop">Gcoop</a> parece que han trabajado este tema precisamente, a fondo. Creándose su propio  Bootstrap-Panels-Everywhere&hellip;</p>

<p>En chat reciente me cuentan que siguen usándolo casi un año después&hellip; Desde nuesra ignorancia, como <em>novatos</em> que somos, veamos pues si logramos que nos sea de utilidad a nosotros también. Tendremos que poner todo nuestro empeño.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gh-pages : Publicar Sencillamente Muestras De Tu Proyecto]]></title>
    <link href="http://jordila.github.io/blog/2014/09/21/gh-pages-publicar-sencillamente-muestras-de-tu-proyecto/"/>
    <updated>2014-09-21T06:52:42-04:00</updated>
    <id>http://jordila.github.io/blog/2014/09/21/gh-pages-publicar-sencillamente-muestras-de-tu-proyecto</id>
    <content type="html"><![CDATA[<p>En muchas ocasiones simplemente requieres de una forma sencilla de publicar muestras de un proyecto web ágilmente. O quizás publicar información relativa al mismo (con una demo), o documentación&hellip;
Conectarse al servidor en el que publicas los trabajos <em>acabados</em> , crear el servidor virtual <em>Apache</em> (Vhost), reiniciarlo&hellip;.bla,bla.
Tedioso.</p>

<p><em>Para ese viaje no nos hacían falta esas alforjas, Sancho&hellip;</em> (diría Don Quijote)</p>

<p>Si usas repositorios de desarrollo web en <em>Github.com</em>, hay una alternativa muy cómoda, una vez uno se ha acostumbrado a trabajar con el flujo <em>git</em> (ver posts anteriores).</p>

<p>La esencia del funcionamiento de <em>gh-pages</em> está en  definir una rama (<em>branch</em>) que alojará aquello que queramos publicar asociado al proyecto. Cuando hagamos el</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin gh-pages</span></code></pre></td></tr></table></div></figure>


<p>correspondiente, <em>Github</em> se encargará de publicarlo, relacionándolo a nuestra cuenta personal(o de organización) en diferentes posibilidades según elijamos en cuanto al nombre de dominio (DNS). Inmediatamente podemos mostrar el resultado al mundo desde él.</p>

<p>No voy a entrar en el detalle operativo, en el mismo <em>Github</em> se ofrece un tutorial y documentación muy ilustrativo de como proceder, <a href="https://pages.github.com">paso a paso, acá</a></p>

<p>Como dicen, simplemente <em>edita, push y tus cambios ya son públicos</em> en Internet.</p>

<p><a href="http://t.co/GkocIhUsnM">Oli nos cuenta como adaptar el flujo de trabajo de ambas ramas</a>  <em>master</em> y <em>gh-pages</em> de forma síncrona.</p>

<p>Actualmente, por ejemplo, estoy trabajando acá :</p>

<p><a href="https://github.com/jordila/CSS3-Accordion">https://github.com/jordila/CSS3-Accordion</a></p>

<p>Aunque probablemente, si transcurre mucho tiempo desde el día de hoy, ese proyecto haya mutado&hellip; Así que prueba a ver este,</p>

<p><a href="http://rendro.github.io/CSS3-Accordion">http://rendro.github.io/CSS3-Accordion</a></p>

<p>Que es el original, del cual hice el <em>fork</em> . O este otro.</p>

<p><a href="https://blueimp.github.io/Gallery/">https://blueimp.github.io/Gallery/</a></p>

<p>De hecho ese mismo mecanismo es en el que se basa la publicación de este Blog que estás leyendo. Uso <a href="http://octopress.org">Octopress</a>. Basado en la tecnología de publicación <em>Jekyll</em>. La misma que usa el propio <em>Github.com</em> para sus páginas.</p>

<p><em>Bonus</em> : para asociar documentación a un proyecto, recomiendo el uso de la <em>wiki</em> que nos ofrece <em>Github.com</em>. De forma muy cómoda y sencilla podemos ir desarrollándola, también mediante un flujo de trabajo <em>git</em> en formato <em>markdown</em> . El repositorio <em>wiki</em> del proyecto convivirá en paralelo con nuestro código. Siendo ambos distinguibles así, a la hora de <em>clonarlos</em> en tu compu localmente :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/TU_USUARIO/TU_REPOSITORIO.wiki.git    
</span><span class='line'>
</span><span class='line'># clona tu wiki localmente
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/TU_USUARIO/TU_REPOSITORIO
</span><span class='line'>
</span><span class='line'># clona tu repositorio localmente
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[De Desarrollo Drupal Colaborativo, Git, PaaS .. Y Otros]]></title>
    <link href="http://jordila.github.io/blog/2014/09/09/de-desarrollo-drupal-colaborativo/"/>
    <updated>2014-09-09T06:43:19-04:00</updated>
    <id>http://jordila.github.io/blog/2014/09/09/de-desarrollo-drupal-colaborativo</id>
    <content type="html"><![CDATA[<p>En los inicios de mis desarrollos con <em>Drupal CMS</em> , mi flujo de trabajo (Workflow) era bien rudimentario. Se basaba en, de forma iterativa, ir ensayando las diferentes funcionalidades requeridas, generando así múltiples maquetas que se iban acumulando en mi disco duro.</p>

<p>El hecho de que <em>Drupal</em> tiene el defecto de no hacer una distinción práctica de código, configuración y datos (estos últimos comparten la base de datos) complica más las cosas. La buena noticia es que esto parece cambiar con la nueva versión 8, que sería liberada en unos meses.</p>

<p>Todo ello resultaba en un galimatías monumental, en el que, por no mezclar configuraciones&hellip;acaba teniendo decenas de maquetas, en las que se contenía UNA funcionalidad específica&hellip; Para colmo, a veces las distintas funcionalidades acaban implentadas en módulos con versiones que difieren entre las maquetas.</p>

<p>Decidido a poner fin a semejante disparate: conocí el módulo <em>Features</em> , que te permite <em>encapsular</em> una determinada funcionalidad&hellip; en otro módulo. De ahí te lo puedes llevar en el bolsillo a donde quieras, reutilizarlo&hellip; y más. Por otro lado, ya venía practicando las bondades de un sistema de versionado como <em>Git</em> (en el que se fundamenta el desarrolla el Linux Kernel ). A reorganizar la forma de trabajo se ha dicho.
En fin, para lo específico a Drupal, os dejo sin más <a href="http://vimeo.com/54306049">con el revelador video de Ramón Vilar</a>, que un encuentro-charla reveló los entresijos y la arquitectura del workflow de un potente equipo de desarrollo <em>Drupal</em> como el suyo. Imprescindible.</p>

<p>Por otro lado, ya puestos, podemos investigar un poco sobre algunas herramientas en la tan cacareada <em>nube</em> que también van en esa misma línea, facilitar la tarea al desarrollador(<em>¿ a qué precio?</em>). Vaya por delante, que pienso que el abuso del concepto <em>Cloud</em> creo que nos retrotrae a la época medieval de Internet : en la que grandes supercomputadoras (en lo general en manos de bancos y alguna universidad) abastecen de servicios a terminales <em>tontos</em> (ligeros) remotos. La verticalidad autoritaria, en detrimento de la horizontalidad autogestiva avanza. <em>¿Es esa la red de redes que queremos?</em> Pero, en fin, eso da para un debate en sí&hellip; (Atención acá al <em><a href="https://www.gnu.org/philosophy/who-does-that-server-really-serve.es.html">punto de vista de RMS sobre los peligros en particular de SaaS</a> en relación a las libertades del software) . Con las precauciones necesarias&hellip; veamos que se esconde tras las </em>nubes_ cibernéticas.</p>

<h3>Pantheon</h3>

<p>Volviendo a lo que nos ocupa, comentar que la comunidad Drupal ha sabido dotarse de una herramienta como <a href="http://getpantheon.com%20(que%20descubr%C3%AD%20via%20el%20inefable%20@vkane">Pantheon</a>, adaptada las necesidades de workflow Drupal. En esencia facilita el control de versiones de código y base datos; desarrollándose en tres escenarios ( test , dev y live ).</p>

<p><img src="http://jordila.github.io/images/myimg/Drupal-developement-workflow.png"></p>

<p>Estoy haciendo algunas pruebas&hellip; Parece prometedor . Lo único que me inquieta es que, por ahora, no se ha licenciado como software libre, siendo una <em>caja negra</em> .</p>

<h3>OpenShift</h3>

<p>Esto último no ocurre con la plataforma <em>OpenShift</em> de Red Hat. La verdad es que impresiona la potencia de la orquestación de todos una gama de servicios puestos a disposición del desarrollador, con un interfaz Web sencillo y elegante a la vez. Hasta puedes instalar en local un paquete de herramientas para gestionar todo ello desde tu línea de comandos (CLI).</p>

<p>Cubre las principales herramientas y frameworks de desarrollo actuales.Por ejemplo, instalar una nuevas instancia Drupal, gestionable con <em>Git</em> en unos pocos clicks&hellip; obteniendo gratuitamente tu dominio</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://miDrupal-rhcloud.com</span></code></pre></td></tr></table></div></figure>


<p>&hellip; además, actualmente permite disponer de 3 instancias de aplicaciones <em>cloud</em> libre y gratuitamente, además de las opciones premium de pago. Parece que se están orientado claramente a la comunidad&hellip; con su canal chat <em>IRC</em> , etc&hellip;</p>

<p>[ Aunque suene paradójico&hellip; ¿Bienvenidos al Cloud computing <em>libre</em> ? ]</p>

<p>No termina acá. Si quieres, y puedes puedes instalar y gestionar tu RHCloud en tus propios servidores de <em>software libre</em> . El software está disponible en <em>Github.com</em> .</p>

<h3>Gandi.net</h3>

<p>Ah! &hellip; y sin darme cuenta, más allá de los acrónimos, vengo usando otra plataforma PaaS&hellip; donde alojo mis proyectos últimamente.<a href="http://gandi.net">Gandi.net</a>. Hasta ahora me ha dado más satisfacciones que problemas de servicio en el servidor privado virtual (VPS) que tengo contratado. Me gustan especialmente varios aspectos de este tradicional proveedor Hosting  :</p>

<ul>
<li><p>disponen de canal propio IRC para soporte&hellip; (me encanta recibir Soporte <em>chat</em> amigablemente )</p></li>
<li><p>usan Debian GNU/Linux: dan apoyo y financiación al proyecto como tal&hellip;así como a Wikimedia (Wikipedia)</p></li>
</ul>


<p>&hellip; con un poco de paciencia, y con la línea de comandos, tú también puedes crearte tu propia plataforma de servicios.</p>

<p><em>Bonus</em> : atención en el futuro a tecnologías como <em>LXC</em> , y servicios relacionados como <em>Docker</em>  me dicen en <em>Gandi</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal Drush : Instalar Una Instancia Con Una Línea De Comando]]></title>
    <link href="http://jordila.github.io/blog/2014/08/24/drupal-drush-instalar-una-instancia-con-una-linea-de-comando/"/>
    <updated>2014-08-24T17:51:32-04:00</updated>
    <id>http://jordila.github.io/blog/2014/08/24/drupal-drush-instalar-una-instancia-con-una-linea-de-comando</id>
    <content type="html"><![CDATA[<p>&hellip; convengamos que el proceso de instalación de una instancia Drupal es tedioso. Hay que crear la base de datos, descargar e instalar código, configurarlo&hellip;etc.</p>

<p>La potencia de <em>drush</em> nos facilita el proceso enormemente.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ drush dl drupal --drupal-project-rename=example
</span><span class='line'>$ cd example
</span><span class='line'>$ drush site-install standard --db-url=mysql://[db_user]:[db_pass]@localhost/[db_name] --site-name=Example</span></code></pre></td></tr></table></div></figure>


<p>Listo.</p>

<p><em>Lo bueno, si breve, dos veces bueno</em></p>

<p>Fuente:<a href="https://www.drupal.org/documentation/install/developers">&lsquo;Quick install for developers&rsquo;</a></p>

<p><em>BONUS</em> : agregando</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>... --account-name=admin --account-pass=[contraseña]</span></code></pre></td></tr></table></div></figure>


<p>a la línea de comandos anterior dejamos configurado <em>admin / contraseña</em> para el  acceso .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git : Diff Y Deshacer Cambios Recientes Fácilmente]]></title>
    <link href="http://jordila.github.io/blog/2014/08/20/git-diff/"/>
    <updated>2014-08-20T09:49:20-04:00</updated>
    <id>http://jordila.github.io/blog/2014/08/20/git-diff</id>
    <content type="html"><![CDATA[<p>De forma sencilla puedo visualizar de forma coloreada, los últimos cambios introducidos, línea por línea&hellip; (atención a los signos + y &ndash; qye las preceden)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff
</span></code></pre></td></tr></table></div></figure>


<p>En la práctica. Pongamos que modifico el epígrafe/&lsquo;caption&rsquo; de una de las imágenes&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jordi@i-ching:~/Git/www.p-i_a$ emacs -nw carousel-blueimp.html //introduzco los cambios desde Emacs
</span><span class='line'>jordi@i-ching:~/Git/www.p-i_a$ git diff
</span><span class='line'>diff --git a/carousel-blueimp.html b/carousel-blueimp.html
</span><span class='line'>index 29ec038..d10e219 100644
</span><span class='line'>--- a/carousel-blueimp.html
</span><span class='line'>+++ b/carousel-blueimp.html
</span><span class='line'>@@ -117,7 +117,7 @@
</span><span class='line'>             &lt;/div&gt;
</span><span class='line'>           &lt;/div&gt;
</span><span class='line'>           &lt;div class="item"&gt;
</span><span class='line'>-            &lt;img src="img/El Campo de Hielo Sur desde el Marconi_1200x800px.JPG" alt="El Campo de Hielo Sur desde el Marconi" /&gt;
</span><span class='line'>+            &lt;img src="img/El Campo de Hielo Sur desde el Marconi_1200x800px.JPG" alt="El Campo de Hielo Sur desde el Marconi. Vista Aérea" 
</span><span class='line'>             &lt;div class="carousel-caption"&gt;
</span><span class='line'>                 &lt;p&gt;El Campo de Hielo Sur desde el Marconi&lt;/p&gt;
</span><span class='line'>             &lt;/div&gt;
</span><span class='line'>(END)
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Y luego, por lo que sea, quiero volver a la versión anterior al cambio.
La forma más sencilla :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git checkout -- carousel-blueimp.php</span></code></pre></td></tr></table></div></figure>


<p><em>NOTA : la opción &mdash; indica la permanencia en la rama (&lsquo;branch&rsquo;) actual de trabajo.</em></p>

<p>Si lo que ocurre es que ya había posicionado el fichero en cuestión en el área de &lsquo;stage&rsquo; (<em>el limbo git</em>) tras un <em>commit</em> &hellip; y todo y con eso quiero deshacer los últimos cambios realizados : <em>que no cunda el pánico!</em></p>

<p>Secuencia anterior con &lsquo;staging&rsquo; .</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jordi@i-ching:~/Git/www.p-i_a$ emacs -nw carousel-blueimp.html //introduzco los cambios desde Emacs
</span><span class='line'>jordi@i-ching:~/Git/www.p-i_a$ git diff
</span><span class='line'>diff --git a/carousel-blueimp.html b/carousel-blueimp.html
</span><span class='line'>index 29ec038..d10e219 100644
</span><span class='line'>--- a/carousel-blueimp.html
</span><span class='line'>+++ b/carousel-blueimp.html
</span><span class='line'>@@ -117,7 +117,7 @@
</span><span class='line'>             &lt;/div&gt;
</span><span class='line'>           &lt;/div&gt;
</span><span class='line'>           &lt;div class="item"&gt;
</span><span class='line'>-            &lt;img src="img/El Campo de Hielo Sur desde el Marconi_1200x800px.JPG" alt="El Campo de Hielo Sur desde el Marconi" /&gt;
</span><span class='line'>+            &lt;img src="img/El Campo de Hielo Sur desde el Marconi_1200x800px.JPG" alt="El Campo de Hielo Sur desde el Marconi. Vista Aérea" 
</span><span class='line'>             &lt;div class="carousel-caption"&gt;
</span><span class='line'>                 &lt;p&gt;El Campo de Hielo Sur desde el Marconi&lt;/p&gt;
</span><span class='line'>             &lt;/div&gt;
</span><span class='line'>(END)
</span><span class='line'>
</span><span class='line'>jordi@i-ching:~/Git/www.p-i_a$ git commit -am carousel-blueimp.html "introduzco los cambios en el área 'staging'"
</span><span class='line'>
</span><span class='line'>jordi@i-ching:~/Git/www.p-i_a$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span></code></pre></td></tr></table></div></figure>


<p>Si leemos atentamente, cosa que no suele ocurrir con frecuencia en la línea de comandos, nos percataremos de que Git se anticipa a la siguiente acción :</p>

<ul>
<li>para extraer el fichero modificado del área de &lsquo;staging&rsquo;, usar _git reset</li>
</ul>


<p>Se puede desandar lo andado faćilmente, como nos indican :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jordi@i-ching:~/Git/www.p-i_a$ git reset HEAD -- carousel-blueimp.html </span></code></pre></td></tr></table></div></figure>


<p>Voilà! Volvimos a la situación anterior: recordemos que los cambios desaparecieron del área &lsquo;staging&rsquo; de Git, pero siguen presentes en el área de trabajo. Si queremos deshacer por completo el cambio, volviendo el fichero a su estado original: no tenemos más que ejecutar la operativa mencionada al principio de este post.</p>

<p>KISS <em>&lsquo;Keep-It-Simple-Stupid&rsquo;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: A Vueltas Con El Estado Del Arte en HTML5 - Formatos ...]]></title>
    <link href="http://jordila.github.io/blog/2014/08/19/video-a-vueltas-con-el-estado-del-arte-en-html5-formatos-dot-dot-dot/"/>
    <updated>2014-08-19T09:55:14-04:00</updated>
    <id>http://jordila.github.io/blog/2014/08/19/video-a-vueltas-con-el-estado-del-arte-en-html5-formatos-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Recientemente estoy haciendo unas pruebas con nuestro propio servidor de video en Internet&hellip; Comparto algunas reflexiones acá.</p>

<h3>Previa</h3>

<p>Tras barajar varias opciones</p>

<ul>
<li><em>Drupal 7 CMS</em></li>
<li><em>MediaGoblin</em> ( tu &lsquo;Twitter + Instagram +  Youtube&rsquo; auspiciado por la Free Software Foundation, muy atractivo )</li>
</ul>


<p>la facilidad que proporciona HTML5 para el manejo de video me hace decantar por el concepto <em>KISS ( Hazlo Sencillo Éstupido !)</em></p>

<p>Estas son mis conclusiones (nunca definitivas), en cuanto a como degustar la sopa de letras de formatos <em>habidos y por haber</em> :</p>

<h3>Video HTML5: <em>Estado del Arte</em></h3>

<p><em>Los códecs comprendidos por HTML5, y de futuro son, por este orden</em></p>

<ul>
<li><em>WebM</em> (formato abierto &lsquo;open&rsquo;,apoyado por Google) , lo cual es definitivo</li>
<li><em>OGV</em> (format libre), de hecho, emparentado técnicamente con el anterior. Mi <em>preferido</em> .</li>
<li><em>MP4 &ndash; H.264</em> , apoyado por Apple, a respetar por cuestiones históricas</li>
</ul>


<p>Hay que tener en cuenta que ninguno de ellos es soportado por la mayoría de los principales navegadores web en todos los casos (Firefox, Opera, Chrome&hellip; y el decadente y propietario IExplorer de WinBugs)</p>

<p>Creo que estos son los formatos a tener en cuenta EN adelante, preferiblemente WebM, que es la &lsquo;inversión&rsquo; técnica pragmática. Habrá que promover OGV como estándar alineado con la filosofía del <em>software libre</em> : por motivos obvios&hellip; ( y sí &ldquo;Evil&rdquo; Google un día le da por apropiarse y <em>cerrar</em> el tan cacareado <em>WebM</em> ? Mmmhh&hellip; :&ndash;/ )</p>

<p>Así pues, después de investigar un poco, y (re)aprender la potencia (una vez más) de <em>GNU/Linux</em> desde la línea de comandos, en este caso para procesos de <em>transcodificación</em> de formatos video. Por no aburrir&hellip; bla,bla&hellip;los <a href="https://github.com/jordila/Patagonia-Images-Gallery/wiki/VIDEO">detalles acá</a>.</p>

<h3>Balbuceos de nuestro <em>Video Streaming</em></h3>

<p>Los archivos de video originales que vamos a transmitir, de divulgación de la maravillos riqueza natural de la Patagonia, están codificados en formato .MOV 720p (via Apple, codec H.264), es decir en HD (alta definición). Hemos transcodificado a los (más arriba)  mencionados formatos. Las apreciaciones y diferencias en cuanto a calidad son muy sutiles&hellip; y subjetivas. Pero en lo objetivo y práctico, podemos deducir.En cualquiera de los tres formatos, en cuanto al tamaño del (&lsquo;frame&rsquo; &ndash; marco) del v</p>

<ul>
<li><p>720p : ofrece la mejor experiencia de visionado, Exige un potente hardware (actualizado) en el que correr el navegador web y buena velocidad de conexión (estable y superior a 1Mbps, de forma óptima)</p></li>
<li><p>480p : ofrece menos calidad,pero responde a un abanico más amplio de dispositivo receptor, prestaciones y ancho de banda. Más &lsquo;universal&rsquo;</p></li>
<li><p>parece que entorno 360p sería el más adecuado para Smartphones y/o conexiones lentas&hellip; si bien no he podido probar mucho aún.</p></li>
</ul>


<p>NOTA: hay que tener en cuanta que, por ejemplo 720p hace realmente referencia a 1280p x <em>720p</em> (HD). 640 x <em>480p</em> (VGA) etc&hellip;</p>

<p>Feliz <em>transcodificación</em> y <em>streaming</em></p>

<p>Beso</p>

<p>KISS &ndash;<em>Keep It Simple Stupid !</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Un Sencillo Flujo De Trabajo (Workflow) II]]></title>
    <link href="http://jordila.github.io/blog/2014/08/17/git-un-sencillo-flujo-de-trabajo-workflow-ii/"/>
    <updated>2014-08-17T03:55:00-04:00</updated>
    <id>http://jordila.github.io/blog/2014/08/17/git-un-sencillo-flujo-de-trabajo-workflow-ii</id>
    <content type="html"><![CDATA[<p>Hace un tiempo, compartíamos <a href="http://jordila.github.io/blog/2014/07/24/git-un-sencillo-flujo-de-trabajo-workflow/">un sencillo flujo de trabajo Git, para pequeños proyectos</a>. Bien retomando el hilo&hellip;</p>

<p>Parecía que ya empezamos a manejar el sistema de control de versiones <em>Git</em> , en sus tres comandos básicos&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git  add .
</span><span class='line'>  
</span><span class='line'>$ git commit -m "blabla"
</span><span class='line'>
</span><span class='line'>$ git push  ...</span></code></pre></td></tr></table></div></figure>


<p><em>y ahora empezamos a tratar de ordenar un poco nuestra forma de desarrollo con git</em></p>

<p>Es fundamental, para sacar el máximo provecho a Git  organizar el flujo de trabajo (&lsquo;workflow&rsquo;), adaptándolo a nuestras necesidades.</p>

<ul>
<li><p>mediante el uso ramas (&lsquo;branch&rsquo;)</p></li>
<li><p>desarrollando estructura de árbol de desarrollo simple y flexible a la vez</p></li>
<li><p>uso de <em>Tags</em> o etiquetas para versionado&hellip;</p></li>
<li><p>&hellip; y mucho más</p></li>
</ul>


<p>En mi caso, decía,  es bien sencillo, uso dos ramas :</p>

<ul>
<li><p><em>master</em>   // que contiene el código &lsquo;estable&rsquo; , se actualiza con menos frecuencia</p></li>
<li><p><em>developement</em>  // código en desarrollo, actualizándola con mayor frecuencia</p></li>
</ul>


<p>y eventualmente una tercera :</p>

<ul>
<li><em>myfeature</em>    // que deriva de developement, donde transcurre el (micro)desarrollo</li>
</ul>


<p>que aparece y desaparece&hellip; según la necesidad. La borro con frecuencia de una vez, tras hacer <em>merge</em> a &lsquo;developement&rsquo;. Veamos :</p>

<ul>
<li><p>terminé el microdesarrollo en la rama <em>myfeature</em> actual y lo incorporo ( <em>merge</em> ) a <em>master</em></p></li>
<li><p>la idea-microdesarrollo resultó que no era acertada&hellip; , marchá atrás.</p></li>
</ul>


<p> Este simple paso de <em>deshacer lo andado</em> &hellip; nos facilita <em>saltar con red</em> y una libertad absoluta en las ideas a desarrollar. Sabemos que en el rama <em>developement</em> de vuelta, por muchos ensayos y errores que cometamos, nos espera el último estado del código <em>funcionando</em> exactamente como lo dejamos. Siempre y cuando respetemos el flujo de trabajo. Obviamente.</p>

<p>Así pues, por ejemplo, quiero desarrollar la cabecera (Header de mi página web). Partiendo de la rama <em>master</em> actual, recién iniciado el repositorio Git.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\\inicio el repositorio , con la rama master por defecto
</span><span class='line'>$ git init
</span><span class='line'>\\creo la rama developement -b , a la cual cambio : 'checkout'
</span><span class='line'>$ git checkout -b developement</span></code></pre></td></tr></table></div></figure>


<p>&hellip;en este punto, decido aventurarme a crear una cabecera de página más <em>innovadora</em> , pero no quiero <em>perder</em> lo hecho hasta ahora. Ello transcurrirá en una nueva rama, derivada de la desarrollo :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\\creo la rama que deriva de la de _developement_ _-b_ , a la cual cambio : _checkout_
</span><span class='line'>$ git checkout -b micabecera</span></code></pre></td></tr></table></div></figure>


<p>Acá realizó, <em>con red</em> todas la pruebas que quiera ! Una vez satisfecho con los resultados, si decido <em>fundirlos</em> con mi estado actual de desarrollo, tan sencillo como :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\\de vuelta a la rama 'developement' , a la cual cambio con  'checkout'
</span><span class='line'>$ git checkout developement
</span><span class='line'>\\ 'merge' sin fast-forward:  'fundo' los cambios hechos en la rama 'micabecera' de la que provengo, conservando el 'histórico'
</span><span class='line'>$ git merge --no-ff micabecera
</span><span class='line'>\\ elimino la rama que acabo de fundir en la rama 'developement', pues ya no la necesito más...
</span><span class='line'>$ git branch -d micabecera
</span><span class='line'>\\ en caso de tener configurado el repositorio remoto, en Github por ejemplo
</span><span class='line'>$ git push origin developement</span></code></pre></td></tr></table></div></figure>


<p>Así hemos incorporado los cambios que realizamos en <em>micabecera</em> a la rama de desarrollo. En local y en remoto.</p>

<p>En un futuro <em>post</em> hablaremos de incluir la rama master en el proceso, y de una forma sencilla de <em>publicar</em> mediante ella el desarrollo actual en nuestro servidor web.</p>

<p>KISS : Keep-it-simple-stupid</p>

<p>Fuentes :</p>

<ul>
<li><p>IMPRESCINDIBLE  <a href="http://nvie.com/posts/a-successful-git-branching-model/">&ldquo;A succesful Git branching model&rdquo; </a></p></li>
<li><p><a href="http://2013.drupalcamp.es/git-flow-workshop">Video tutoriales de la DrupalCamp de Cáceres</a></p></li>
</ul>


<p><em>Thanks</em> nvie y DrupalCamp ES</p>

<p><em>Bonus</em>:</p>

<p>// para hacer &lsquo;push&rsquo; de todo el árbol (y sus ramas) de trabajo, sin distinción</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push --all -u</span></code></pre></td></tr></table></div></figure>


<p>en un workflow sencillo como este,y así no hay que precuparse de concretar la rama, ni de saber en la que estamos, bla&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU: 'Como Escoger Una Licencia Para Tu Propia Obra ?' V2]]></title>
    <link href="http://jordila.github.io/blog/2014/08/07/gnu-como-escoger-una-licencia-para-tu-propia-obra/"/>
    <updated>2014-08-07T17:24:28-04:00</updated>
    <id>http://jordila.github.io/blog/2014/08/07/gnu-como-escoger-una-licencia-para-tu-propia-obra</id>
    <content type="html"><![CDATA[<p><em>Traducción para el</em> <strong>Proyecto GNU</strong></p>

<p><em>original</em> : <a href="https://gnu.org/licenses/license-recommendations.html">https://gnu.org/licenses/license-recommendations.html</a></p>

<h2>Como escoger una licencia para tu propia obra?</h2>

<p>El Free Software Foundation&rsquo;s Licensing and Compliance Lab. mantiene esta página. Puedes dar apoyo a nuestro esfuerzo mediante una donación a la FSF. ¿Quedó acá alguna pregunta si responder al respecto? Comprueba algunos de nuestros recursos sobre licencias o contacta al Compliance Lab en <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#108;&#105;&#x63;&#101;&#x6e;&#x73;&#x69;&#x6e;&#x67;&#x40;&#x66;&#x73;&#102;&#46;&#111;&#114;&#103;">&#108;&#105;&#x63;&#101;&#x6e;&#x73;&#105;&#110;&#103;&#64;&#x66;&#x73;&#x66;&#x2e;&#x6f;&#x72;&#x67;</a></p>

<h3>Introducción</h3>

<p>A menudo nos preguntan que licencia recomendamos para usar en un determinado proyecto. Hemos escrito públicamente sobre esta cuestión con anterioridad, pero la información está diseminada en varios documentos, FAQ y comentarios sobre licencias. Este artículo recolecta toda esa información en única fuente, para simplicar el acceso a ella y facilitar su referenciado a la comunidad.
Estas recomendaciones se orientan a obras diseñadas para la realización de tareas prácticas. Incluyendo software, documentación y más. Obras artísticas, o que promuevan un punto de vista son cuestiones de diferente ámbito; el Proyecto GNU no tiente una postura general de como deberían publicarse   más allá de que deberían ser todas utilizables sin software que no sea libre (particularmente libre de DRM). Sin embargo, puede resultar útil seguir estas recomendaciones para obras artísticas que acompañen a un determinado programa.</p>

<p>Las recomendaciones aplican a la licenciamiento de una obra creada por tí—tanto si es una modificación de una obra existente, o una nueva obra original. No cubren el caso en que se combina material existente bajo diferentes licencias. Si buscas ayuda en este aspecto, por favor consulta nuestra GPL FAQ.
Después de ver nuestras recomendaciones, si quieres asesoramiento, puedes escribir a <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#108;&#x69;&#x63;&#x65;&#x6e;&#x73;&#x69;&#x6e;&#x67;&#64;&#x67;&#110;&#117;&#x2e;&#111;&#114;&#x67;">&#108;&#x69;&#99;&#x65;&#x6e;&#x73;&#105;&#x6e;&#x67;&#64;&#103;&#x6e;&#117;&#x2e;&#x6f;&#x72;&#103;</a>. Resaltar que probablemente tome varias semanas la respuesta por parte del equipo de licenciamiento; si en un mes no recibiste respuesta, por favor, escríbenos de nuevo.</p>

<p>Contribuyendo a un nuevo proyecto
Al contribuir a un proyecto existente, deberías habitualmente publicar las modificaciones realizadas bajo la misma licencia que la obra original. Es positivo cooperar con los que mantienen el proyecto, y usar una licencia diferente para tus modificaciones a menudo convierte la cooperación en algo muy dificultoso. Deberías hacer eso únicamente por motivos de fuerza mayor.
Un caso en el que puede justificarse el uso de una licencia diferente es cuando realizas cambios en una obra que no es copyleft. Si la versión creada es considerablemente más útil que la original, entonces merece la pena hacer tu obra copyleft. Si te encuentras en esta situación, por favor sigue las recomendaciones más abajo para el licenciamiento de un nuevo proyecto.
Si eliges licenciar tus contribuciones bajo una licencia diferente, por el motivo que sea, debes comprobar antes que la licencia original permite el uso de material bajo tu licencia de elección. Para minimizar el posible impacto en otros,  muestra explicitamente que partes de la obra están bajo que licencia.</p>

<h3>Software</h3>

<p>Recomendamos diferentes licencias para diferentes proyectos, dependiendo principalmente en el propósito del software. Generalmente, recomendamos usar la licencia más restrictiva que no interfiera con dicho propósito. Nuestro ensayo &ldquo;Qué es el copyleft?&rdquo; explica el concepto de copyleft en más detalle, y porque es de forma general la mejor estrategia de publicación.
Hay sólo un par de tipos de proyectos en los que pensamos sería mejor no usar copyleft de ningún tipo. El primero es en proyectos muy pequeños. Usamos 300 líneas como umbral: cuando  el código fuente es menor que esto, los beneficios generados por el copyleft son usualmente inapreciables para justificar  la inconveniencia de asegurarse de que una copia de la licencia siempre acompañe al software.
El segundo caso es en proyectos que implementan estándares que están en confrontación con estándares propietarios, como Ogg Vorbis (que compite con el audio MP3) y WebM (que compite frente a video MPEG-4). Para estos proyectos, extender el uso del código es vital para avanzar en la causa del software libre, y en si mismo hace mucho más que el copyleft del código del proyecto pudiera hacer.
En estas situaciones especiales en las que el copyleft es inapropiado, recomendamos usar la Apache License 2.0 . Está es una licencia software no copyleft que incluye términos para prevenir denuncias de infracción de patentes por parte de distribuidores y contribuyentes. Ello no inmuniza al software de las amenazas de las patentes, pero impide que los que ostentan las patentes establezcan la dinámica de publicar ese software en términos libres para luego requerir a los receptores un acuerdo en términos no libres en una licencia de patente (licencia laxa,&ldquo;bait and switch&rdquo;).</p>

<p>En todos los otros casos, recomendamos alguna forma de copyleft. Si tu proyecto es una librería, y los desarrolladores ya están usando un librería alternativa establecida publicada bajo una licencia no libre o una licencia laxa como la mencionada anteriormente, entonces recomendamos usar la GNU Lesser General Public License (LGPL). Al contrario que en el caso discutido anteriormente, en el que el proyecto implementa un estándar, acá la adopción por si misma no alcanza ningún objetivo particular, por lo que no hay motivo para evitar el copyleft por completo, Sin embargo, si requieres a los desarrolladores que usan tu librería para publicar su obra bajo una licencia enteramente copyleft, simplemente usarán una de las alternativas disponibles, y ello no permitirá avanzar tampoco en nuestra causa. La Lesser GPL fue diseñada para cubrir el término medio entre ambos casos, permitiendo a los desarrolladores de software propietario usar la librería cubierta, pero proporcionando cierto beneficio copyleft que revierta en los usuarios en su caso. Para saber más sobre el razonamiento subyacente en estos casos, lee &ldquo; “Why you shouldn&rsquo;t use the Lesser GPL for your next library”
Si tu proyecto pudiera ser ejecutado en un servidor después de haber sido mejorado por otros, interactuando con sus usuarios a través de una red, y te preocupa que se reduzca el número de desarrolladores contribuyendo a las versiones publicadas  como resultado, recomendamos la GNU Affero General Public License (AGPL). Los términos de la AGPL son prácticamente idénticos a los de la GPL; la única diferencia sustancial es que se agrega una condición extra para asegurar que aquellos que usen el software en red tendrán la facilidad de obtener su código fuente. Esta condición no resuelve todos los problemas que pueden derivar cuando los usuarios realizan su computación en un servidor—no evitará que los usuarios se vean afectados por el Software como Servicio—por cumple con todo aquello que puede cumplir una licencia. Para saber más sobre estas cuestiones, lee &#8220;Why the Affero GPL&rdquo;. En cualquier otro caso, recomendamos que uses la versión más reciente de la GNU General Public License (GPL) para tu proyecto. Su restrictivo copyleft es apropiado para cualquier tipo de software, incluyendo numerosas protecciones para la libertad de los usuarios.</p>

<h3>Documentación</h3>

<p>Recomendamos la GNU Free Documentation License (GFDL) para tutoriales, manuales de referencia y otros complejas obras de documentación. Es una restrictiva licencia copyleft para obras educativas, inicialmente escritas como manuales de software, incluyendo términos que espefícamente resuelven cuestiones típicas que derivan de la distribución y modificación de estas obras.
En pocas palabras, en obras de documentación derivadas, como tarjetas de referencia,  es mejor el uso de una licencia GNU permisiva, ya que la copua de GFDL difícilmente podría abarcar una tarjeta de referencia. No uses CC-BY, puesto que es incompatible con la GFDL.
Para páginas de manual, recomendamos la GFDL si la página es larga, y la licencia GNU permisiva si es una página corta.
Cierta documentación incluye código fuente. Por ejemplo, un manual para un lenguaje de programación podría incluir ejemplos para seguir por parte de  los lectores. Deberías incluir estos en el manual bajo términos FDL, y publicarlos bajo otra licencia apropiada para el software. Al hacerlo, se facilita el uso del código en otros proyectos. Recomendamos que dediques pequeñas piezas de software al dominio público usando CC0, y distribuir piezas más amplias bajo la misma licencia que usa el proyecto software asociado.</p>

<h2>Otros datos para programas</h2>

<p>Esta sección trata el resto de obras para uso práctico que pudieras incluir con el software. Para darte algunos ejemplos, ello incluiría iconos y otros gráficos, fuentes, y datos geográficos funcionales o útiles. También se podría aplicar a artes, a pesar de que no se criticaría el hecho de no hacerlo.
Si estás creando estas obras específicamente para usar en un proyecto software, generalmente recomendamos que publiques tu obra bajo la misma licencia que el software. No hay problema ninguno en hacerlo con las licencias recomendadas : GPLv3, LGLPv3, AGPLv3, y GPLv2 pueden ser aplicadas a cualquier tipo de obra—no únicamente software—susceptible de copyright y que denote claramente la predisposición a la modificación. Al usar la misma licencia que el software facilitará el cumplimiento por parte de los distribuidores, y evita cualquier duda sobre potenciales cuestiones de compatibilidad. El uso de una licencia libre diferente podría ser apropiado si provee de algún beneficio práctico específico, como una mejor cooperación con otros proyectos libres.
Si tu obra no se crea para el uso en un proyecto software específico, o si pudiera ser inapropiado usar la misma licencia que el proyecto, entonces únicamente recomendamos la elección de una licencia copyleft apropiada para tu obra. Algunas de ellas se muestran en nuestra lista de licencias. Si ninguna licencia parece especialmente apropiada, la licencia Creative Commons Atribution-ShareAlike es una licencia copyleft que puede ser usada para una variedad de obras.</p>

<p> #license:CC-by-nd-3.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian GNU/Linux: Reflexiones en Cuanto a (Re)instalación Y Mantenimiento...]]></title>
    <link href="http://jordila.github.io/blog/2014/08/05/debian-gnu-slash-linux-reflexiones-en-cuanto-a-re-instalacion-y-mantenimiento-dot-dot-dot/"/>
    <updated>2014-08-05T11:26:35-04:00</updated>
    <id>http://jordila.github.io/blog/2014/08/05/debian-gnu-slash-linux-reflexiones-en-cuanto-a-re-instalacion-y-mantenimiento-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Recientemente incurrí en un garrafal error en mi <em>Debian GNU/Linux</em> &hellip; que me llevó a &lsquo;pisar&rsquo; con otros archivos, ni más ni menos que el directorio raíz : sí, sí&hellip; <strong>/</strong> .</p>

<p>En fin, de todo se aprende&hellip; como <em>via rapida</em> de solución decidí optar por hacer <em>backup</em> y reinstalar la partición de sistema. Estoy en el curso de un desarrollo que no puede demorar&hellip; Acá van mis reflexiones tras casi dos día de vaivenes en mis sistemas. Vaya, en mis herramientas de trabajo.</p>

<h3>Nunca hagas en el sistema nada crítico en un estado anímico/físico bajo&hellip;</h3>

<p>Un amigo una vez me comentó en una ocasión&hellip;</p>

<p><em>&ndash; Nunca discutas con tu pareja bajo situación de cansancio, falta de sueño&hellip;.El resultado puede ser explosivo!</em></p>

<p>Efectivamente, con el tiempo uno aprende que es mejor una <em>retirada</em> que una victoria <em>pírrica</em> en esos instantes. Nuestro estado en ese momento no puede más que derivar en un círculo vicioso de irritabilidad, que nos llevá a una mayor irascibilidad, que nos llevá a los gritos&hellip; y vuelta a empezar.</p>

<p>En síntesis, eso me ocurrió ayer&hellip; no con mi pareja, sino con mi compañera de trabajo : mi computadora. <em>[me ahorro los detalles]</em></p>

<p>El caso es que en 48h fui capaza de tumbar yo solito las 2 computadoras que usamos en casa&hellip; Voilà!</p>

<h3>Operación Ave Fénix</h3>

<p>Tras los momentos de desesperación&hellip; es importante revertir la situación. Recuperar el estado de ánimo es crucial para ser capaz de <em>levantar los sistemas</em> en la mayor brevedad de tiempo. Y sobre todo, dejar de autoinculparse. Eso nos meterría en otro circulo vicioso. <em>Resiliencia</em> es la palabra.</p>

<p>En adelante, más que dar los detalles, simplemente haré un par de consideraciones que a mí me sirvieron para que el proceso fuera lo más ágil y menos traumático posible.</p>

<ul>
<li>crucial: tener copia de las credenciales de seguridad / encriptación : llaves <em>SSH</em> y <em>GPG</em> . Lo contrario es jugar con fuego. Digo una obviedad&hellip;</li>
<li>el hecho de tener diferenciadas las partciones de <em>sistema</em> y <em>datos</em> (pongamos <strong>/</strong> y <strong>home</strong> &hellip; hay quén añade otras&hellip; <strong>/var</strong> ) ayudó mucho, como se verá &hellip;</li>
<li>lo anterior me permitió que, sin necesidad de <em>backup</em> en el momento, al reinstalar el sistema de nuevo en <strong>/</strong>, y re-ubicando <strong>/home</strong> en el lugar correspondiente, avisando al instalador ( <em>mantener datos, no borrar</em>), las aplicaciones volvieran a funcionar como antes sin esfuerzo.</li>
</ul>


<p>La explicación del último punto: para volver a sentirse uno de nuevo como en su &ldquo;ciber-casa&rdquo; cuanto antes es que por ejemplo el navegador Firefox guarda los parámetros particulares en una carpeta <em>oculta</em> , precedida con un <strong>.</strong> como corresponde a su condiciçon <em>oculta</em> :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jordi@i-ching:~/.mozilla$ 
</span></code></pre></td></tr></table></div></figure>


<p>y así sucesivamente la mayoría de las aplicaciones. Ello permite que, tras la reinstalación, se retomen por parte de la aplicación determinada su correspondiente carpeta de parámetros del usuario en esa apliación particular (en este caso marcadores, plugins, etc&hellip; )</p>

<p>Para acabar, sistemas operativos como <em>Arch Linux</em> o su alternativa  <a href="https://en.wikipedia.org/wiki/Parabola_Linux">Parábola Linux-Libre</a> usan una filosofía que difiere de la de <em>Ubuntu</em> o su <em>padre, Debian</em> . En vez de publicar <em>releases</em> cada determinado tiempo (LTS, etc&hellip;), basta con actualizar regularmente los paquetes&hellip; y rara vez vas a tener necesidad de re-instalar por completo el sistema. Siempre y cuando no seas tan bruto y torpe a la vez, como conté al principio&hellip; !</p>

<p>KISS : Keep It Simple</p>

<p><em>Bonus</em> : en mis sistema aproveché la ocasión para volver al entorno de escritorio (<em>desktop</em>) <a href="https://es.wikipedia.org/wiki/Xfce">Xfce</a>&hellip; tras un tiempo con  <a href="https://es.wikipedia.org/wiki/Xfce">Lxde</a>. Si bien este último es el más liviano que nunca he probado, por un inapreciable mayor consumo de  capacidad del procesador tienes un entorno mucho más versátil. Con el tiempo se ha convertido en mi preferido. &hellip; Que le pregunten a <em>Linus Torvalds</em> .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Comparar Cambios Con Diff]]></title>
    <link href="http://jordila.github.io/blog/2014/08/02/git-comparar-cambios-con-diff/"/>
    <updated>2014-08-02T03:11:55-04:00</updated>
    <id>http://jordila.github.io/blog/2014/08/02/git-comparar-cambios-con-diff</id>
    <content type="html"><![CDATA[<p><em>¿cómo veo el detalle de los últimos cambios introducidos, de forma comparativa?</em></p>

<p>&hellip; gracias al comando <em>diff</em> , de la familia <em>Unix</em>, aplicado a <em>Git</em> .</p>

<p>Veamos la secuencia de cambios, en el fichero  <em>primero.txt</em> , en el que acabo de añadir la línea de texto &lsquo; <em>viene antes que los otros</em> &rsquo;  :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jordi@i-ching:~/Git/test$ git status
</span><span class='line'># On branch master
</span><span class='line'># Changes not staged for commit:
</span><span class='line'>#   (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>#
</span><span class='line'># modified:   primero.txt
</span><span class='line'>#
</span><span class='line'>no changes added to commit (use "git add" and/or "git commit -a")
</span><span class='line'>jordi@i-ching:~/Git/test$ git diff
</span><span class='line'>diff --git a/primero.txt b/primero.txt
</span><span class='line'>index b5e2b8f..49e8234 100644
</span><span class='line'>--- a/primero.txt
</span><span class='line'>+++ b/primero.txt
</span><span class='line'>@@ -1,3 +1,5 @@
</span><span class='line'> hola
</span><span class='line'> 
</span><span class='line'> este es primero
</span><span class='line'>+viene antes que los otros
</span><span class='line'>+</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Si en cambio uso el comando con el parámetro &hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jordi@i-ching:~/Git/test$ git diff --staged</span></code></pre></td></tr></table></div></figure>


<p>&hellip; me mostraría las diferencias en los archivos en los que se hizo <em>commit</em> . Es decir, a los que se les aplicó el comando <em>git add <archivo1> <archivo2></em> &hellip;</p>

<p>Como habrás visto, <em>git status</em> nos da el &lsquo;estado de situación&rsquo;, avisándonos de cambios en el flujo de trabajo <em>git</em> , y proponiendo los siguientes pasos&hellip;</p>

<p><em>Bonus</em> : si usas la opción <em>colorear</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --color-words </span></code></pre></td></tr></table></div></figure>


<p>&hellip;podrás tener una visualización de los cambios más inmediata y atractiva. Prueba :&ndash;)</p>

<p>KISS : Keep It Simple</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU/Linux: A Vueltas Con El Espacio en Disco, Y Su Liberación]]></title>
    <link href="http://jordila.github.io/blog/2014/07/31/gnu-slash-linux-a-vueltas-con-el-espacio-en-disco/"/>
    <updated>2014-07-31T02:34:15-04:00</updated>
    <id>http://jordila.github.io/blog/2014/07/31/gnu-slash-linux-a-vueltas-con-el-espacio-en-disco</id>
    <content type="html"><![CDATA[<h3>Mmhhh&hellip;</h3>

<p><em>¿qué cuanto espacio en disco me queda?</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ df
</span><span class='line'>
</span><span class='line'>$ df -h</span></code></pre></td></tr></table></div></figure>


<p>Salida de ejemplo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jordi@i-ching:~$ df -h
</span><span class='line'>Filesystem                                              Size  Used Avail Use% Mounted on
</span><span class='line'>rootfs                                                  8.9G  8.2G  193M  98% /
</span><span class='line'>udev                                                     10M     0   10M   0% /dev
</span><span class='line'>tmpfs                                                   201M  900K  200M   1% /run
</span><span class='line'>/dev/disk/by-uuid/1e7fdf9f-7123-43f4-8ec9-32c4b19057c5  8.9G  8.2G  193M  98% /
</span><span class='line'>tmpfs                                                   5.0M     0  5.0M   0% /run/lock
</span><span class='line'>tmpfs                                                   811M     0  811M   0% /run/shm
</span><span class='line'>/dev/sda5                                                12G   11G  543M  96% /home
</span><span class='line'>/dev/sda3                                                88G   80G  4.0G  96% /media/DATA
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><em>:&ndash;/ estoy agotando el espacio en la partición de sistema&hellip;(!)</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get autoclean
</span><span class='line'>
</span><span class='line'>$ sudo apt-get clean
</span><span class='line'>
</span><span class='line'>// comandos que eliminan paquetes sin usar o en caché..., con varios matices
</span><span class='line'>
</span><span class='line'>$ sudo apt-get autoremove
</span><span class='line'>
</span><span class='line'>// eliminando  paquetes de dependencias que quedaron sin usar
</span></code></pre></td></tr></table></div></figure>


<p>Ecología : el espacio en disco duro es un bien escaso&hellip;</p>

<p><em>Bonus</em>: más elaborada es la eliminación de paquetes <em>huérfanos</em> en caso de <em>Debian</em> <a href="http://www.waveguide.se/?article=how-to-quickly-remove-all-unused-packages-under-debian">mediante <em>deborphan</em> y un script</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Sacando Partido Al Archivo Log]]></title>
    <link href="http://jordila.github.io/blog/2014/07/29/git-sacando-partido-al-archivo-log/"/>
    <updated>2014-07-29T14:37:55-04:00</updated>
    <id>http://jordila.github.io/blog/2014/07/29/git-sacando-partido-al-archivo-log</id>
    <content type="html"><![CDATA[<p><em>Mmmh&hellip;¿qué es lo que diablos hice?¿como llegué a esta situación?</em></p>

<p>Veamos&hellip; para hacer una autopsia de lo sucedido, el archivo log <em>es tu amigo</em>.
Más allá veremos la potencia de de <em>git</em> en sinergia con <em>GNU/Linux</em> , gracias al comando de este último para buscar expresiones en archivos ( <em>grep</em> )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log
</span><span class='line'>
</span><span class='line'>//muestra el archivo log de los _commits_ realizados, en sentido cronológico...
</span></code></pre></td></tr></table></div></figure>


<p>¿Y si quiero ser más concreto en mi búsqueda en el log ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log -n 4
</span><span class='line'>
</span><span class='line'>//muestra la información relativa a los 4 (n) últimos _commits_</span></code></pre></td></tr></table></div></figure>


<p>¿y si lo que quiero es buscar <em>commits</em> relacionados con la expresión &lsquo;index.php&rsquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --grep="index.php"</span></code></pre></td></tr></table></div></figure>


<p>sencillo y elegante a la vez.</p>

<p><em>KISS : Keep it simple</em></p>
]]></content>
  </entry>
  
</feed>
